#+TITLE: Orgise
#+ident: orgise
#+Date: 21.02.2021
Krótki przegląd działania *orgise*'a i jego pseudo
dokumentację oraz napiszę z czego korzystałem. Co prawda raczej nikt
prócz mnie tego nie użyje, ale jestem tego świadom. Piszę tę
dokumentację po części, aby samemu nie zapomnieć o co chodzi.

Jeśli ktoś w ogóle nie wie /czy jest org/, radzę mu zajrzeć na [[https://orgmode.org/][jego stronę]] albo
obejrzeć dotyczący go fragment [[https://youtu.be/JWD1Fpdd4Pc?t=1206][tego filmiku]], całość [[https://youtu.be/SzA2YODtgK4][tej prelekcyjki]]
bądź przeczytać jeden z niezliczonych [[https://karl-voit.at/2017/09/23/orgmode-as-markup-only/][peanów cudzych]].
*** czym jest *orgise*?
*Orgise* (czy też ~orgise~) to narzędzie, jakie napisałem w /ruby i
 bashu/ celem oszczędzenia sobie syfienia rąk tym durnym htmlem. 
*** jak go używać?
*Orgise* funkcjonuje w dwu trybach:
1. tryb dodawczy -- chcemy dodawać nowe /posty/ ciurkiem do dołu
   istniejącej już strony
2. tryb nowo-stronny -- dodajemy nowe /posty/, każdy jako osobną
   stronę w folderze ~posts~

Tryb warunkuje ostatni argument. Jeśli jest to ~--newp~ to orgise
będzie funkcjonować w trybie nowych stron. Wpp włączy tryb edycyjny.
**** tryb dodawczy
uruchomienie ~orgise.sh~ *bez* flagi ~--newp~.
***** orgizacja całego folderu
Użycie jest dość proste. Załóżmy, że np chcemy *zorgise*'ować cały katalog ~_main~
(czyli: mam w tym katalogu pliki orgowe (obowiązkowo z tagiem
~#+TITLE~) tak, aby dodały się jako kolejne bloki na stronę w pliku
~index.html~. Wtedy wystarczy użyć komendy 
#+BEGIN_EXAMPLE
  ./orgise.sh [dir] [outp]
#+END_EXAMPLE
gdzie opcjonalne argumenty ~dir~ i ~outp~ to odpowiednio katalog z
którego pobierane będą (w kolejności posortownej) pliki orgowe celem
orgizacji, a ~outp~ to strona (plik htmlowy), do której zostaną
dodane/na której zostaną zedytowane. Defaultowo ~dir="blog/_main"~,
a ~outp="blog/index.html"~.

Przetworzą się wszystkie pliki z katalogu ~dir~. Jedynym wyjątkiem są te,
które opatrzone są tagiem ~#+EXCLUDE: true~.
***** orgizacja pojedynczego pliku
To trochę kwestia bardziej złożona, ale mamy też więcej
opcji. Wtedy składnia jest następująca:
#+BEGIN_SRC shell
  ruby orgise.md forg page [page_out] [-n]
#+END_SRC
gdzie ~forg~ to plik do zorgizowania, ~page~ to strona którą trzeba
zedytować, a ~page_out~ to miejsce do zapisania wyniku (jeśli się go
nie poda to będzie to domyślnie równe ~page~), a użycie flagi ~-n~
mówi, że zamiast edycji istniejącego posta chcemy utworzyć nowy. 

Posty rozróżnia się po ich identyfikatorze. Standardowo jest to
wartość z ~#+TITLE~ z myślnikami zamiast spacji, ale jeśli się
sprecyzuje osobno ~#+IDENT~ to to pole zadecyduje o ~id~ htmlowym. 
**** tryb nowostronny
uruchomienie ~orgise.sh~ *wraz z* flagą ~--newp~.
***** cały folder
Podobna składnia jak powyżej.
#+BEGIN_EXAMPLE
  ./orgise.sh [dir] [outp] [szablon] --newp
#+END_EXAMPLE
Argumenty opcjonalne:
+ ~dir~ to katalog z orgowymi plikami do unowostronnienia. defautlowo
  ~dir=blog/_posts~
+ ~outp~ to katalog na wrzucenie nowopowstałych stron. defaultowo ~outp=blog/posts~
+ ~szablon~ to szablon, z którego orgise ma tworzyć strony. defaultowo
  ~szablon=blog/posts/szablon.html~
***** pojedyncza strona
Podobnie jak poprzednio ~ruby orgise.rb~, ale tym razem trzeba również dodać flagę
~--newp~. 
*** jak wygląda workflow?
Jak chcę utworzyć nowy post na tę stronę, robię to w następującym
stylu:
+ piszę go w orgu, wrzucam do ~_posts~. daję mu znaczniki ~#+title~,
  ~#+date~ i czasami ~#+ident~
+ jeśli chcę aby pojawił się na stronie głównej bloga piszę w podobnym stylu
  krótkie streszczonko z linkiem, które następnie ląduje w ~_main~.
+ komendą ~./orgise.sh~ aktualizuję zawartość strony głównej tzw bloga
  i poprawiam to ~./orgise --newp~, które skanuje katalog ~_posts~ i
  bierze posty bez ~#+exclude~, z których tworzy strony w ~posts~
+ /voilà/
*** jak to jest zrobione?
Najtrudniejszą część na szczęście zrobiono za mnie. *Gem* do ruby
[[https://github.com/wallyqs/org-ruby][org-ruby]] (/genialne/ narzędzie. ciekawe też, że [[https://github.com/github/markup#markups][korzysta z niego]]
github renderując pliki ~.org~ u siebie) zapewnia cały parsing i pewną
customizację. Osobiście dodałem do tego przetwarzanie plików tak aby
te zachowały kompatybilność z resztą strony. Poza tym obsługa ~#+DATE~
oraz małe zmiany w source kodzie org-ruby wynikłe z braku wdrożnia do
głównej wersji niektórych ważnych zmian. To wszystko mocno regexpem
potraktowałem. To była największa męka prawdę powiedziawszy, ponieważ
[[http://regex.info/blog/2006-09-15/247][jak wiadomo]] regexp jest /bardzo/ kłopotliwy.

Dodatkowo użyłem gemu [[https://github.com/threedaymonk/htmlbeautifier][html beautifier]] aby ten
wyegenrowany regexpowym wstawianiem i zamienianiem html wyglądał *jak
człowiek*.

Mogę załączyć mały fragmencik, ale zainteresowani mogą ujrzeć to
wszystko na [[https://github.com/test0wanie/homepage/blob/master/cyr/orgise.rb][githubie]].
----------
| *Some people, when confronted with a problem, think:*  /I know, I'll use regular expressions./  *Now they have two problems.*  |
---------
#+BEGIN_SRC ruby
  def make_postorg(org)
    html, titl = parsuj(org)
    titl.gsub! " ", "-"
    id = titl
    linkise(html)
    res = ["<div class=\"text\" id=\"" + id + "\">\n" + html + "\n</div>" +
           " <!-- fin_post_" + id + " -->",
           (Regexp.new "<div class=\"text\" id=\"" + Regexp.escape(id) +
                       "\">(.|\n)*</div>(\s|\n)*" +
                       Regexp.escape(" <!-- fin_post_" + id + " -->"))]
    return res
  end
#+END_SRC
sekwencyjna orgizacja plików:
#+BEGIN_SRC shell
  for f in `ls $dir/*.org | sort -V`
  do
      echo orgizuję "$f"
      ruby orgise.rb $f $outp
  done

#+END_SRC
***** Orgizacja wygląda tak:
      w trybie dodawczym:
  #+BEGIN_EXAMPLE
    $ ./orgise.sh
    orgise -- append mode
    appending orgised blog/_main posts into blog/index.html
    orgising blog/_main/0_intro.org
    ,* ---- ORGISE ---- *
    edition of a post at 3863
    blog/_main/0_intro.org --> blog/index.html
    ,* ---- THUS CONCLUDING THE ORGISATION ---- *
    orgising blog/_main/1_pierwszy.org
    ,* ---- ORGISE ---- *
    edition of a post at 5333
    blog/_main/1_pierwszy.org --> blog/index.html
    ,* ---- THUS CONCLUDING THE ORGISATION ---- *
    orgising blog/_main/2_orgise.org
    ,* ---- ORGISE ---- *
    edition of a post at 5866
    blog/_main/2_orgise.org --> blog/index.html
    ,* ---- THUS CONCLUDING THE ORGISATION ---- *
  #+END_EXAMPLE
  w trybie nowostronnym:
  #+BEGIN_EXAMPLE
    $ ./orgise.sh --newp
    orgise -- new page mode
    orgising everything from blog/_posts into new pages in blog/posts
    orgising blog/_posts/1_pierwszy.org
    ,* ---- ORGISE ---- *
    blog/_posts/1_pierwszy.org --> blog/posts/1_pierwszy.html
    ,* ---- THUS CONCLUDING THE ORGISATION ---- *
    orgised blog/posts/1_pierwszy.html
    orgising blog/_posts/2_orgise.org
    ,* ---- ORGISE ---- *
    blog/_posts/2_orgise.org --> blog/posts/2_orgise.html
    ,* ---- THUS CONCLUDING THE ORGISATION ---- *
    orgised blog/posts/2_orgise.html
    orgising blog/_posts/tractatus.org
    ,* ---- ORGISE ---- *
    blog/_posts/tractatus.org is excluded
  #+END_EXAMPLE

*** TODO /[[https://www.tate.org.uk/art/artworks/merz-che-fare-ar00598][Che fare?]]/
Jedyne co pozostało do zrobienia, to obmyślenie, jak zacząć tego
używać na innych stronach.

**** DONE Lateszny formating!
 Oho! Wiem. Przydałoby się dodać obsługę jakichś komend specjalnych!
 Np. że dodanie $\LaTeX$owo ~textsc~ do utworzy taki span z klasą
 ~textsc~ sformatowaną należycie -- kapitaliki. Dodałbym też chętnie ~emph~ na
 przykład jako specjalny szeryfowy krój. Tak samo klasę ~qed~ na dowodziki.

 A nawet już to zrobiłem! /Voilà/:

 \emph{*koci lemat*: /wszystkie koty są piękne/} 

 \textsc{Dowód:} \emph{piękność jest [[../../koty][oczywista]], trafność użycia
 kwantyfikatora $\forall$ -- ćwiczenie}.

 \qed{kot erat}
# \emph{multi
# line emphasis}

# \textsc{multi
# line capitalisation}

# \qed{multi
# line quod erat}
