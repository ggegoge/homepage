#+TITLE: Orgise
#+ident: orgise
#+Date: 19.02.2021
Tutaj zapiszę krótki przegląd działania *orgise*'a i jego pseudo
dokumentację oraz napiszę z czego korzystałem. Co prawda raczej nikt
prócz mnie tego nie użyje, ale jestem tego świadom. Piszę tę
dokumentację po części, aby samemu nie zapomnieć o co chodzi.
*** czym jest *orgise*?
*Orgise* (czy też ~orgise~) to narzędzie, jakie napisałem w ruby i
 bashu celem oszczędzenia sobie syfienia rąk tym durnym htmlem. 
*** jak używać?
**** orgizacja całego folderu
Użycie jest dość proste. Załóżmy, że np chcemy *zorgise*'ować cały katalog ~_posts~
(czyli: mam w tym katalogu pliki orgowe (obowiązkowo z tagiem
~#+TITLE~) tak, aby dodały się jako kolejne bloki na stronę w pliku
~index.html~. Wtedy wystarczy użyć komendy ~orgise.sh _posts
index.html~ i przetworzą się wszystkie pliki. Jedynym wyjątkiem są te,
które opatrzone są tagiem ~#+EXCLUDE: true~. 
**** orgizacja pojedynczego pliku
To trochę kwestia bardziej złożona, ale mamy też więcej
opcji. Wtedy składnia jest następująca:
#+BEGIN_SRC shell
  ruby orgise.md forg page [page_out] [-n]
#+END_SRC
gdzie ~forg~ to plik do zorgizowania, ~page~ to strona którą trzeba
zedytować, a ~page_out~ to miejsce do zapisania wyniku (jeśli się go
nie poda to będzie to domyślnie równe ~page~), a użycie flagi ~-n~
mówi, że zamiast edycji istniejącego posta chcemy utworzyć nowy. 

Posty rozróżnia się po ich identyfikatorze. Standardowo jest to
wartość z ~#+TITLE~ z myślnikami zamiast spacji, ale jeśli się
sprecyzuje osobno ~#+IDENT~ to to pole zadecyduje o ~id~ htmlowym. 
*** jak to jest zrobione?
Najtrudniejszą część na szczęście zrobiono za mnie. *Gem* do ruby
[[https://github.com/wallyqs/org-ruby][org-ruby]] zapewnia cały parsing i pewną customizację. Osobiście dodałem
do tego przetwarzanie plików tak aby te zachowały kompatybilność z
resztą strony. Poza tym obsługa ~#+DATE~ oraz małe zmiany w source
kodzie org-ruby wynikłe z braku wdrożnia do głównej wersji niektórych
ważnych zmian. To wszystko mocno regexpem potraktowałem. To była
największa męka prawdę powiedziawszy, ponieważ [[http://regex.info/blog/2006-09-15/247][jak wiadomo]] regexp jest
/bardzo/ kłopotlwy.

Dodatkowo użyłem gemu [[https://github.com/threedaymonk/htmlbeautifier][html beautifier]] aby ten
wyegenrowany regexpowym wstawianiem i zamienianiem html wyglądał "jak
człowiek".

Mogę załączyć mały fragmencik, ale zainteresowani mogą ujrzeć to
wszystko na [[https://github.com/test0wanie/homepage/blob/master/cyr/orgise.rb][githubie]].

/now you have two problems/:
#+BEGIN_SRC ruby
  def make_postorg(org)
    html, titl = parsuj(org)
    titl.gsub! " ", "-"
    id = titl
    linkise(html)
    if html.nil? then raise("nil html??") end
    res = ["<div class=\"text\" id=\"" + id + "\">\n" + html + "\n</div>" +
           " <!-- fin_post_" + id + " -->",
           (Regexp.new "<div class=\"text\" id=\"" + Regexp.escape(id) +
                       "\">(.|\n)*</div>(\s|\n)*" +
                       Regexp.escape(" <!-- fin_post_" + id + " -->"))]
    return res
  end
#+END_SRC
sekwencyjna orgizacja plików:
#+BEGIN_SRC shell
  for f in `ls $dir/*.org | sort -V`
  do
      echo orgizuję "$f"
      ruby orgise.rb $f $outp
  done

#+END_SRC
Orgizacja wygląda tak:
#+BEGIN_src
  $ ./orgise.sh
  orgizuję blog/_posts/0_intro.org
  ,* ---- ORGISE ---- *
  edition of a post at 3872
  blog/_posts/0_intro.org --> blog/index.html
  ,* ---- THUS CONCLUDING THE ORGISATION ---- *
  orgizuję blog/_posts/1_pierwszy.org
  ,* ---- ORGISE ---- *
  edition of a post at 6256
  blog/_posts/1_pierwszy.org --> blog/index.html
  ,* ---- THUS CONCLUDING THE ORGISATION ---- *
  orgizuję blog/_posts/3_orgise.org
  ,* ---- ORGISE ---- *
  blog/_posts/3_orgise.org --> blog/index.html
  ,* ---- THUS CONCLUDING THE ORGISATION ---- *
  orgizuję blog/_posts/post.org
  ,* ---- ORGISE ---- *
  blog/_posts/post.org is excluded
#+END_src
